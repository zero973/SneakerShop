// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SneakerShop.DataAdapters.ApplicationContexts;

#nullable disable

namespace SneakerShop.DataAdapters.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ac6c10fd-58cd-4f2e-a69d-27ca572db6b2"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("2503ca1f-4de2-43ef-8749-73b91b9c4b8c"),
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("3f049b98-849e-4d08-ab8a-5b8f2537d54f"),
                            RoleId = new Guid("ac6c10fd-58cd-4f2e-a69d-27ca572db6b2")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Contracts.Models.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f049b98-849e-4d08-ab8a-5b8f2537d54f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2b22cac6-209c-44e0-9718-fcb71d1dcc53",
                            Email = "sneakershop@mail.ru",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAENpjyE56KJSxrIVed2r0E4DbY6JOGT9JlwJ6ykVMFgau3p/B2dDccELy0XVFVeGIRg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Contracts.Models.Entities.BasketElement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DiscountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GoodId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("GoodId");

                    b.HasIndex("SizeId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Contracts.Models.Entities.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DiscountTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("GoodId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DiscountTypeId");

                    b.HasIndex("GoodId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Contracts.Models.Entities.DiscountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Percent")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("DiscountTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2c41197-f68e-4c92-bf29-a6e68b61a70f"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(9492),
                            Description = "Обычная летняя скидка",
                            IsActual = true,
                            Name = "Летняя скидка",
                            Percent = 5
                        },
                        new
                        {
                            Id = new Guid("0e21665e-3aeb-48f5-ad21-8564bcafb3b2"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(9496),
                            Description = "Обычная зимняя скидка",
                            IsActual = true,
                            Name = "Зимняя скидка",
                            Percent = 10
                        },
                        new
                        {
                            Id = new Guid("279847e2-08f0-4082-a2e0-1f62a8f6fd79"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(9497),
                            Description = "Особая скидка",
                            IsActual = true,
                            Name = "Особая скидка",
                            Percent = 50
                        });
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Contracts.Models.Entities.Good", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GoodSubtypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ManufacturerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GoodSubtypeId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Goods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f219746-6957-44af-ad60-6703b6e1c7d8"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(8372),
                            Description = "Куртка адидас чёрная ....",
                            GoodSubtypeId = new Guid("0a8a7aac-5217-47ca-b635-448dd5603522"),
                            ImageURL = "https://fullsourcemedia.s3.amazonaws.com/images/items/e/raw/J331_black_form_front.jpg",
                            IsActual = true,
                            ManufacturerId = new Guid("dfe8ec89-4a13-4bbe-8285-935017f8ce23"),
                            Name = "Куртка адидас",
                            Price = 500m
                        },
                        new
                        {
                            Id = new Guid("78e274be-042c-4d5d-b2cc-00d0cae437ce"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(8380),
                            Description = "Кроссовки nike белые ....",
                            GoodSubtypeId = new Guid("0afd27db-05c4-48ab-a612-d16192b40503"),
                            ImageURL = "https://i.pinimg.com/originals/58/7d/82/587d82a229ceba80432497d594206c06.png",
                            IsActual = true,
                            ManufacturerId = new Guid("f7e37f02-86bc-4892-951d-c9e6c9f0a7ce"),
                            Name = "Кроссовки nike",
                            Price = 2500m
                        },
                        new
                        {
                            Id = new Guid("7afca5f6-7163-477c-bf1d-3f09036ac42b"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(8382),
                            Description = "Рюкзак nike белые ....",
                            GoodSubtypeId = new Guid("df52a8fc-3741-4bbb-9010-dba4f02475d3"),
                            ImageURL = "https://freepngimg.com/thumb/backpack/9-2-backpack-png-hd.png",
                            IsActual = true,
                            ManufacturerId = new Guid("f7e37f02-86bc-4892-951d-c9e6c9f0a7ce"),
                            Name = "Рюкзаак nike",
                            Price = 5000m
                        },
                        new
                        {
                            Id = new Guid("999dccb8-e1e9-4847-aa38-3735813816c6"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(8383),
                            Description = "Футболка adidas синяя ....",
                            GoodSubtypeId = new Guid("a5375bc2-ca16-4c01-9c12-f175a22f4419"),
                            ImageURL = "https://c1.klipartz.com/pngpicture/301/681/sticker-png-tshirt-tshirt-clothing-dress-fashion-jacket-playera-laundry-aline.png",
                            IsActual = true,
                            ManufacturerId = new Guid("dfe8ec89-4a13-4bbe-8285-935017f8ce23"),
                            Name = "Футболка adidas",
                            Price = 5000m
                        });
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Contracts.Models.Entities.GoodSubtype", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GoodTypeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GoodTypeId");

                    b.ToTable("GoodSubtypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0a8a7aac-5217-47ca-b635-448dd5603522"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(3636),
                            GoodTypeId = new Guid("ccb924ac-bae7-4d6a-b606-c578e903be91"),
                            IsActual = true,
                            Name = "Куртки"
                        },
                        new
                        {
                            Id = new Guid("a5375bc2-ca16-4c01-9c12-f175a22f4419"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(3638),
                            GoodTypeId = new Guid("ccb924ac-bae7-4d6a-b606-c578e903be91"),
                            IsActual = true,
                            Name = "Футболки"
                        },
                        new
                        {
                            Id = new Guid("ca079622-ee8e-414a-9193-1997c4176291"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(3640),
                            GoodTypeId = new Guid("ccb924ac-bae7-4d6a-b606-c578e903be91"),
                            IsActual = true,
                            Name = "Майки"
                        },
                        new
                        {
                            Id = new Guid("c4c4f563-c53b-4928-9f80-806c943d7b25"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(3642),
                            GoodTypeId = new Guid("ccb924ac-bae7-4d6a-b606-c578e903be91"),
                            IsActual = true,
                            Name = "Кофты"
                        },
                        new
                        {
                            Id = new Guid("e6158c8e-2741-4f2e-bcca-f9597c72276c"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(3644),
                            GoodTypeId = new Guid("ccb924ac-bae7-4d6a-b606-c578e903be91"),
                            IsActual = true,
                            Name = "Джинсы"
                        },
                        new
                        {
                            Id = new Guid("1e074d7f-ee5d-473c-8518-adf5656ea64a"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(3647),
                            GoodTypeId = new Guid("ccb924ac-bae7-4d6a-b606-c578e903be91"),
                            IsActual = true,
                            Name = "Брюки"
                        },
                        new
                        {
                            Id = new Guid("e68004d9-3187-4aba-934b-8728e53e6ef3"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(3648),
                            GoodTypeId = new Guid("ccb924ac-bae7-4d6a-b606-c578e903be91"),
                            IsActual = true,
                            Name = "Юбки"
                        },
                        new
                        {
                            Id = new Guid("fdccc078-04a0-432a-a2bb-db61f9e355ad"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(3649),
                            GoodTypeId = new Guid("ccb924ac-bae7-4d6a-b606-c578e903be91"),
                            IsActual = true,
                            Name = "Легинсы"
                        },
                        new
                        {
                            Id = new Guid("70c088d2-7d32-401b-894c-c62f7f8457f9"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(3651),
                            GoodTypeId = new Guid("98f424e2-9ffb-458f-84d4-e8cff5f6585f"),
                            IsActual = true,
                            Name = "Подштанники"
                        },
                        new
                        {
                            Id = new Guid("df7dbffe-12c5-499e-b4f6-3bac85dcb10f"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(3652),
                            GoodTypeId = new Guid("98f424e2-9ffb-458f-84d4-e8cff5f6585f"),
                            IsActual = true,
                            Name = "Трусы"
                        },
                        new
                        {
                            Id = new Guid("0afd27db-05c4-48ab-a612-d16192b40503"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(3653),
                            GoodTypeId = new Guid("efe665a4-2531-44da-a040-b7bb4da8ed22"),
                            IsActual = true,
                            Name = "Кроссовки"
                        },
                        new
                        {
                            Id = new Guid("644f7f44-2b50-4e96-9219-1292ac0f64d2"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(3654),
                            GoodTypeId = new Guid("efe665a4-2531-44da-a040-b7bb4da8ed22"),
                            IsActual = true,
                            Name = "Кеды"
                        },
                        new
                        {
                            Id = new Guid("66b8b3b2-6f2a-4e07-b092-bb60bd9263b9"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(3656),
                            GoodTypeId = new Guid("efe665a4-2531-44da-a040-b7bb4da8ed22"),
                            IsActual = true,
                            Name = "Туфли"
                        },
                        new
                        {
                            Id = new Guid("d1a9cb6b-b268-4e09-992e-eafd04ec4d2c"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(3659),
                            GoodTypeId = new Guid("efe665a4-2531-44da-a040-b7bb4da8ed22"),
                            IsActual = true,
                            Name = "Каблуки"
                        },
                        new
                        {
                            Id = new Guid("df52a8fc-3741-4bbb-9010-dba4f02475d3"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(3660),
                            GoodTypeId = new Guid("5b297472-63c5-4329-afd8-dda647b953dd"),
                            IsActual = true,
                            Name = "Рюкзаки"
                        },
                        new
                        {
                            Id = new Guid("0d81af64-d21d-4758-adbc-dd2ef836a866"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(3661),
                            GoodTypeId = new Guid("5b297472-63c5-4329-afd8-dda647b953dd"),
                            IsActual = true,
                            Name = "Сумки"
                        },
                        new
                        {
                            Id = new Guid("a4a48d37-dcb1-40f0-86bd-f961e089a554"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(3662),
                            GoodTypeId = new Guid("5b297472-63c5-4329-afd8-dda647b953dd"),
                            IsActual = true,
                            Name = "Барсетки"
                        },
                        new
                        {
                            Id = new Guid("1690e16c-509c-4b3f-a6fa-e4d5129a970f"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(3663),
                            GoodTypeId = new Guid("5b297472-63c5-4329-afd8-dda647b953dd"),
                            IsActual = true,
                            Name = "Кольца"
                        },
                        new
                        {
                            Id = new Guid("c2a82456-2e98-4d85-8c9a-8a7c04196bc4"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(3664),
                            GoodTypeId = new Guid("5b297472-63c5-4329-afd8-dda647b953dd"),
                            IsActual = true,
                            Name = "Браслеты"
                        },
                        new
                        {
                            Id = new Guid("7f259ec8-b615-4245-b761-95888bbfadd1"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(3665),
                            GoodTypeId = new Guid("5b297472-63c5-4329-afd8-dda647b953dd"),
                            IsActual = true,
                            Name = "Перчатки"
                        });
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Contracts.Models.Entities.GoodType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("GoodTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ccb924ac-bae7-4d6a-b606-c578e903be91"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(3564),
                            IsActual = true,
                            Name = "Верхняя одежда"
                        },
                        new
                        {
                            Id = new Guid("98f424e2-9ffb-458f-84d4-e8cff5f6585f"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(3589),
                            IsActual = true,
                            Name = "Нижняя одежда"
                        },
                        new
                        {
                            Id = new Guid("efe665a4-2531-44da-a040-b7bb4da8ed22"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(3590),
                            IsActual = true,
                            Name = "Обувь"
                        },
                        new
                        {
                            Id = new Guid("5b297472-63c5-4329-afd8-dda647b953dd"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(3591),
                            IsActual = true,
                            Name = "Аксессуары"
                        });
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Contracts.Models.Entities.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dfe8ec89-4a13-4bbe-8285-935017f8ce23"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(6290),
                            Description = "Адики .......",
                            IsActual = true,
                            Name = "Adidas"
                        },
                        new
                        {
                            Id = new Guid("f7e37f02-86bc-4892-951d-c9e6c9f0a7ce"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(6338),
                            Description = "Найки ..........",
                            IsActual = true,
                            Name = "Nke"
                        },
                        new
                        {
                            Id = new Guid("c673879d-cb67-48c8-852b-cce9b7056e0c"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(6340),
                            Description = "Гучи ..........",
                            IsActual = true,
                            Name = "Gucci"
                        },
                        new
                        {
                            Id = new Guid("8f623ecb-f2dc-4d04-b344-fe4a0abed041"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(6341),
                            Description = "Томми ..........",
                            IsActual = true,
                            Name = "Tommy Hilfiger"
                        });
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Contracts.Models.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Contracts.Models.Entities.OrderedGood", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DiscountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GoodId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("GoodId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SizeId");

                    b.ToTable("OrderedGoods");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Contracts.Models.Entities.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GoodSubtypeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GoodSubtypeId");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae2641d8-fe7c-4864-84a9-d513d22033d7"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(9251),
                            GoodSubtypeId = new Guid("0a8a7aac-5217-47ca-b635-448dd5603522"),
                            IsActual = true,
                            Name = "XXL"
                        },
                        new
                        {
                            Id = new Guid("506b1374-8e93-4602-aad2-9a3f5c1e1bac"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(9261),
                            GoodSubtypeId = new Guid("0a8a7aac-5217-47ca-b635-448dd5603522"),
                            IsActual = true,
                            Name = "XL"
                        },
                        new
                        {
                            Id = new Guid("b191bb3e-67b2-42d8-ad4f-5ec2d3c7274f"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(9264),
                            GoodSubtypeId = new Guid("0a8a7aac-5217-47ca-b635-448dd5603522"),
                            IsActual = true,
                            Name = "L"
                        },
                        new
                        {
                            Id = new Guid("37d47ba1-145f-4980-8258-e937adc11298"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(9265),
                            GoodSubtypeId = new Guid("0a8a7aac-5217-47ca-b635-448dd5603522"),
                            IsActual = true,
                            Name = "M"
                        },
                        new
                        {
                            Id = new Guid("75fa43a5-87ed-40a0-bcfe-87288ce17236"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(9267),
                            GoodSubtypeId = new Guid("0a8a7aac-5217-47ca-b635-448dd5603522"),
                            IsActual = true,
                            Name = "S"
                        },
                        new
                        {
                            Id = new Guid("de6e51c7-f9ed-4f97-81de-f2037ad0cab7"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(9295),
                            GoodSubtypeId = new Guid("0a8a7aac-5217-47ca-b635-448dd5603522"),
                            IsActual = true,
                            Name = "XS"
                        },
                        new
                        {
                            Id = new Guid("589bc477-bc8d-4800-b5f5-372b34804633"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(9296),
                            GoodSubtypeId = new Guid("0afd27db-05c4-48ab-a612-d16192b40503"),
                            IsActual = true,
                            Name = "XXL"
                        },
                        new
                        {
                            Id = new Guid("020845de-8b18-4177-afe5-a2f10e5b5aa1"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(9297),
                            GoodSubtypeId = new Guid("0afd27db-05c4-48ab-a612-d16192b40503"),
                            IsActual = true,
                            Name = "XL"
                        },
                        new
                        {
                            Id = new Guid("785121e7-ead3-49d9-ade7-64e6905e387d"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(9298),
                            GoodSubtypeId = new Guid("0afd27db-05c4-48ab-a612-d16192b40503"),
                            IsActual = true,
                            Name = "L"
                        },
                        new
                        {
                            Id = new Guid("f820fb80-7c7c-4c93-bc2c-a2df2e956e68"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(9302),
                            GoodSubtypeId = new Guid("0afd27db-05c4-48ab-a612-d16192b40503"),
                            IsActual = true,
                            Name = "M"
                        },
                        new
                        {
                            Id = new Guid("71891871-80ee-4324-9eb2-a705f5f763c0"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(9303),
                            GoodSubtypeId = new Guid("0afd27db-05c4-48ab-a612-d16192b40503"),
                            IsActual = true,
                            Name = "S"
                        },
                        new
                        {
                            Id = new Guid("e11f758c-2ebc-4f86-b2f6-086d39c2603c"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(9304),
                            GoodSubtypeId = new Guid("0afd27db-05c4-48ab-a612-d16192b40503"),
                            IsActual = true,
                            Name = "XS"
                        },
                        new
                        {
                            Id = new Guid("3f91763f-2ad9-4cd9-a838-2f91375f309e"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(9305),
                            GoodSubtypeId = new Guid("df52a8fc-3741-4bbb-9010-dba4f02475d3"),
                            IsActual = true,
                            Name = "XXL"
                        },
                        new
                        {
                            Id = new Guid("021d2911-cd32-45af-a907-18025b2f1506"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(9306),
                            GoodSubtypeId = new Guid("df52a8fc-3741-4bbb-9010-dba4f02475d3"),
                            IsActual = true,
                            Name = "XL"
                        },
                        new
                        {
                            Id = new Guid("ea0babb6-ab69-4579-9a6c-40bb38eaa5ea"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(9307),
                            GoodSubtypeId = new Guid("df52a8fc-3741-4bbb-9010-dba4f02475d3"),
                            IsActual = true,
                            Name = "M"
                        },
                        new
                        {
                            Id = new Guid("ba3500df-7773-4b0c-a5f8-41217f7f149f"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(9308),
                            GoodSubtypeId = new Guid("df52a8fc-3741-4bbb-9010-dba4f02475d3"),
                            IsActual = true,
                            Name = "S"
                        },
                        new
                        {
                            Id = new Guid("f25f2964-756a-43a1-9131-e4aaca1b9ba2"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(9309),
                            GoodSubtypeId = new Guid("a5375bc2-ca16-4c01-9c12-f175a22f4419"),
                            IsActual = true,
                            Name = "XXL"
                        },
                        new
                        {
                            Id = new Guid("b220d50e-b38e-4b98-ae8e-24051472ce20"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(9313),
                            GoodSubtypeId = new Guid("a5375bc2-ca16-4c01-9c12-f175a22f4419"),
                            IsActual = true,
                            Name = "XL"
                        },
                        new
                        {
                            Id = new Guid("9337aca7-0120-4385-900f-e782f65a500e"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(9314),
                            GoodSubtypeId = new Guid("a5375bc2-ca16-4c01-9c12-f175a22f4419"),
                            IsActual = true,
                            Name = "L"
                        },
                        new
                        {
                            Id = new Guid("2ce462aa-17f2-46fa-bf2a-2b18bd7c0355"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(9315),
                            GoodSubtypeId = new Guid("a5375bc2-ca16-4c01-9c12-f175a22f4419"),
                            IsActual = true,
                            Name = "M"
                        },
                        new
                        {
                            Id = new Guid("a6d26dd5-90cc-4b1f-aa0e-9cafe6baaa89"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(9316),
                            GoodSubtypeId = new Guid("a5375bc2-ca16-4c01-9c12-f175a22f4419"),
                            IsActual = true,
                            Name = "S"
                        },
                        new
                        {
                            Id = new Guid("2d57ef16-d1b2-4a90-be58-63cc342d6f99"),
                            CreateDate = new DateTime(2024, 4, 24, 18, 20, 24, 626, DateTimeKind.Local).AddTicks(9317),
                            GoodSubtypeId = new Guid("a5375bc2-ca16-4c01-9c12-f175a22f4419"),
                            IsActual = true,
                            Name = "XS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SneakerShop.DataAdapters.Contracts.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SneakerShop.DataAdapters.Contracts.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SneakerShop.DataAdapters.Contracts.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SneakerShop.DataAdapters.Contracts.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Contracts.Models.Entities.BasketElement", b =>
                {
                    b.HasOne("SneakerShop.DataAdapters.Contracts.Models.Entities.Discount", "_Discount")
                        .WithMany("BasketElements")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SneakerShop.DataAdapters.Contracts.Models.Entities.Good", "_Good")
                        .WithMany("BasketElements")
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SneakerShop.DataAdapters.Contracts.Models.Entities.Size", "_Size")
                        .WithMany("BasketElements")
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SneakerShop.DataAdapters.Contracts.Models.Entities.AppUser", "_User")
                        .WithMany("Basket")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("_Discount");

                    b.Navigation("_Good");

                    b.Navigation("_Size");

                    b.Navigation("_User");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Contracts.Models.Entities.Discount", b =>
                {
                    b.HasOne("SneakerShop.DataAdapters.Contracts.Models.Entities.DiscountType", "_DiscountType")
                        .WithMany("Discounts")
                        .HasForeignKey("DiscountTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SneakerShop.DataAdapters.Contracts.Models.Entities.Good", "_Good")
                        .WithMany("Discounts")
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("_DiscountType");

                    b.Navigation("_Good");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Contracts.Models.Entities.Good", b =>
                {
                    b.HasOne("SneakerShop.DataAdapters.Contracts.Models.Entities.GoodSubtype", "_GoodSubtype")
                        .WithMany("Goods")
                        .HasForeignKey("GoodSubtypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SneakerShop.DataAdapters.Contracts.Models.Entities.Manufacturer", "_Manufacturer")
                        .WithMany("Goods")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("_GoodSubtype");

                    b.Navigation("_Manufacturer");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Contracts.Models.Entities.GoodSubtype", b =>
                {
                    b.HasOne("SneakerShop.DataAdapters.Contracts.Models.Entities.GoodType", "GoodType")
                        .WithMany("GoodSubtypes")
                        .HasForeignKey("GoodTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GoodType");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Contracts.Models.Entities.Order", b =>
                {
                    b.HasOne("SneakerShop.DataAdapters.Contracts.Models.Entities.AppUser", "_User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("_User");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Contracts.Models.Entities.OrderedGood", b =>
                {
                    b.HasOne("SneakerShop.DataAdapters.Contracts.Models.Entities.Discount", "_Discount")
                        .WithMany("OrderedGoods")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SneakerShop.DataAdapters.Contracts.Models.Entities.Good", "_Good")
                        .WithMany("OrderedGoods")
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SneakerShop.DataAdapters.Contracts.Models.Entities.Order", "_Order")
                        .WithMany("OrderedGoods")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SneakerShop.DataAdapters.Contracts.Models.Entities.Size", "_Size")
                        .WithMany("OrderedGoods")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("_Discount");

                    b.Navigation("_Good");

                    b.Navigation("_Order");

                    b.Navigation("_Size");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Contracts.Models.Entities.Size", b =>
                {
                    b.HasOne("SneakerShop.DataAdapters.Contracts.Models.Entities.GoodSubtype", "_GoodSubtype")
                        .WithMany("Sizes")
                        .HasForeignKey("GoodSubtypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("_GoodSubtype");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Contracts.Models.Entities.AppUser", b =>
                {
                    b.Navigation("Basket");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Contracts.Models.Entities.Discount", b =>
                {
                    b.Navigation("BasketElements");

                    b.Navigation("OrderedGoods");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Contracts.Models.Entities.DiscountType", b =>
                {
                    b.Navigation("Discounts");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Contracts.Models.Entities.Good", b =>
                {
                    b.Navigation("BasketElements");

                    b.Navigation("Discounts");

                    b.Navigation("OrderedGoods");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Contracts.Models.Entities.GoodSubtype", b =>
                {
                    b.Navigation("Goods");

                    b.Navigation("Sizes");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Contracts.Models.Entities.GoodType", b =>
                {
                    b.Navigation("GoodSubtypes");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Contracts.Models.Entities.Manufacturer", b =>
                {
                    b.Navigation("Goods");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Contracts.Models.Entities.Order", b =>
                {
                    b.Navigation("OrderedGoods");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Contracts.Models.Entities.Size", b =>
                {
                    b.Navigation("BasketElements");

                    b.Navigation("OrderedGoods");
                });
#pragma warning restore 612, 618
        }
    }
}
