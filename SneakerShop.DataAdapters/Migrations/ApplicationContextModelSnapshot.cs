// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SneakerShop.DataAdapters.ApplicationContexts;

#nullable disable

namespace SneakerShop.DataAdapters.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e615cd3-1ba7-4110-81fd-8fa4c0abb5e9"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("7783ba08-532a-4061-8cdc-69fe1bc96301"),
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("2f9b0ad3-00d0-45be-b5fd-b49b9093a1a7"),
                            RoleId = new Guid("5e615cd3-1ba7-4110-81fd-8fa4c0abb5e9")
                        },
                        new
                        {
                            UserId = new Guid("2f9b0ad3-00d0-45be-b5fd-b49b9093a1a7"),
                            RoleId = new Guid("7783ba08-532a-4061-8cdc-69fe1bc96301")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Models.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f9b0ad3-00d0-45be-b5fd-b49b9093a1a7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "afbf1e0b-5573-4484-9ff4-060a13ea76c7",
                            Email = "sneakershop@mail.ru",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEO7B2CUOgbgiKGx+2YkjFD27PKcmLSI7LA6AJOPchq2nTFLZj8xpGnjp8VTMbNjOEA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Models.Entities.BasketElement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DiscountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GoodId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("GoodId");

                    b.HasIndex("SizeId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Models.Entities.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DiscountTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("GoodId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DiscountTypeId");

                    b.HasIndex("GoodId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Models.Entities.DiscountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Percent")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("DiscountTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1351dae0-b8d2-48cf-a13d-a4cd67856629"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 81, DateTimeKind.Local).AddTicks(461),
                            Description = "Обычная летняя скидка",
                            IsActual = true,
                            Name = "Летняя скидка",
                            Percent = 5
                        },
                        new
                        {
                            Id = new Guid("73d85971-227e-4a77-8b2d-cca587857d13"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 81, DateTimeKind.Local).AddTicks(466),
                            Description = "Обычная зимняя скидка",
                            IsActual = true,
                            Name = "Зимняя скидка",
                            Percent = 10
                        },
                        new
                        {
                            Id = new Guid("d4822de1-9340-4fc8-a5a4-13cb8c417261"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 81, DateTimeKind.Local).AddTicks(467),
                            Description = "Особая скидка",
                            IsActual = true,
                            Name = "Особая скидка",
                            Percent = 50
                        });
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Models.Entities.Good", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GoodSubtypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ManufacturerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GoodSubtypeId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Goods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5459aa8-575d-4bb6-b2c4-de3c9e1590eb"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(9425),
                            Description = "Куртка адидас чёрная ....",
                            GoodSubtypeId = new Guid("010e9af5-1d47-453c-8bf4-ca2acedf9f9f"),
                            ImageURL = "https://fullsourcemedia.s3.amazonaws.com/images/items/e/raw/J331_black_form_front.jpg",
                            IsActual = true,
                            ManufacturerId = new Guid("15052e27-e29c-4ef6-a99a-d379812b5d53"),
                            Name = "Куртка адидас",
                            Price = 500m
                        },
                        new
                        {
                            Id = new Guid("acb2055a-4ee4-48aa-9469-c9899db1e818"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(9438),
                            Description = "Кроссовки nike белые ....",
                            GoodSubtypeId = new Guid("11a22f6f-8043-46cf-9d37-d2bf58b0ec95"),
                            ImageURL = "https://i.pinimg.com/originals/58/7d/82/587d82a229ceba80432497d594206c06.png",
                            IsActual = true,
                            ManufacturerId = new Guid("e55eaea7-ef90-42fb-954e-ae74251cf961"),
                            Name = "Кроссовки nike",
                            Price = 2500m
                        },
                        new
                        {
                            Id = new Guid("08660589-ac5a-4c6f-8704-d99f20d2658d"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(9440),
                            Description = "Рюкзак nike белые ....",
                            GoodSubtypeId = new Guid("e29440b7-f4c4-4b36-b144-3f2c4d681b51"),
                            ImageURL = "https://freepngimg.com/thumb/backpack/9-2-backpack-png-hd.png",
                            IsActual = true,
                            ManufacturerId = new Guid("e55eaea7-ef90-42fb-954e-ae74251cf961"),
                            Name = "Рюкзаак nike",
                            Price = 5000m
                        },
                        new
                        {
                            Id = new Guid("2fd0f100-5d72-434a-98eb-6a3065ebe39f"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(9441),
                            Description = "Футболка adidas синяя ....",
                            GoodSubtypeId = new Guid("d023cf9a-7b27-4bc4-b481-6fdff24d1faa"),
                            ImageURL = "https://c1.klipartz.com/pngpicture/301/681/sticker-png-tshirt-tshirt-clothing-dress-fashion-jacket-playera-laundry-aline.png",
                            IsActual = true,
                            ManufacturerId = new Guid("15052e27-e29c-4ef6-a99a-d379812b5d53"),
                            Name = "Футболка adidas",
                            Price = 5000m
                        });
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Models.Entities.GoodSubtype", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GoodTypeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GoodTypeId");

                    b.ToTable("GoodSubtypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("010e9af5-1d47-453c-8bf4-ca2acedf9f9f"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(4998),
                            GoodTypeId = new Guid("be06f6e5-66a3-4bf3-8217-8a8433daaf57"),
                            IsActual = true,
                            Name = "Куртки"
                        },
                        new
                        {
                            Id = new Guid("d023cf9a-7b27-4bc4-b481-6fdff24d1faa"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(5016),
                            GoodTypeId = new Guid("be06f6e5-66a3-4bf3-8217-8a8433daaf57"),
                            IsActual = true,
                            Name = "Футболки"
                        },
                        new
                        {
                            Id = new Guid("ad5f2ad3-68b2-404f-ac8d-92501f59a3e7"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(5017),
                            GoodTypeId = new Guid("be06f6e5-66a3-4bf3-8217-8a8433daaf57"),
                            IsActual = true,
                            Name = "Майки"
                        },
                        new
                        {
                            Id = new Guid("76d27d28-25bb-44d0-8846-71bd288982c1"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(5018),
                            GoodTypeId = new Guid("be06f6e5-66a3-4bf3-8217-8a8433daaf57"),
                            IsActual = true,
                            Name = "Кофты"
                        },
                        new
                        {
                            Id = new Guid("c4d14640-e6b3-44a7-ae99-f88f2b097b65"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(5019),
                            GoodTypeId = new Guid("be06f6e5-66a3-4bf3-8217-8a8433daaf57"),
                            IsActual = true,
                            Name = "Джинсы"
                        },
                        new
                        {
                            Id = new Guid("b7672fd5-bd97-4caf-876f-7454e0022317"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(5020),
                            GoodTypeId = new Guid("be06f6e5-66a3-4bf3-8217-8a8433daaf57"),
                            IsActual = true,
                            Name = "Брюки"
                        },
                        new
                        {
                            Id = new Guid("a194eb2f-8842-4e51-856a-f2093bba0c3a"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(5021),
                            GoodTypeId = new Guid("be06f6e5-66a3-4bf3-8217-8a8433daaf57"),
                            IsActual = true,
                            Name = "Юбки"
                        },
                        new
                        {
                            Id = new Guid("aaa82db2-f368-43e6-bfcf-472a9c125936"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(5022),
                            GoodTypeId = new Guid("be06f6e5-66a3-4bf3-8217-8a8433daaf57"),
                            IsActual = true,
                            Name = "Легинсы"
                        },
                        new
                        {
                            Id = new Guid("24d97687-937a-4b70-951c-0f75338445d7"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(5023),
                            GoodTypeId = new Guid("8dcf657e-a3b2-497e-a6de-d2cc6687b2e8"),
                            IsActual = true,
                            Name = "Подштанники"
                        },
                        new
                        {
                            Id = new Guid("cce6bc71-3e60-4e0a-bc5e-fe3bbf2eea03"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(5025),
                            GoodTypeId = new Guid("8dcf657e-a3b2-497e-a6de-d2cc6687b2e8"),
                            IsActual = true,
                            Name = "Трусы"
                        },
                        new
                        {
                            Id = new Guid("11a22f6f-8043-46cf-9d37-d2bf58b0ec95"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(5026),
                            GoodTypeId = new Guid("39234702-29d2-4abb-976e-a0bc8a8f4836"),
                            IsActual = true,
                            Name = "Кроссовки"
                        },
                        new
                        {
                            Id = new Guid("8d1315ef-d51b-4c28-8d87-214892b562fc"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(5027),
                            GoodTypeId = new Guid("39234702-29d2-4abb-976e-a0bc8a8f4836"),
                            IsActual = true,
                            Name = "Кеды"
                        },
                        new
                        {
                            Id = new Guid("a43686cd-3835-4a6f-a4ea-ae801cf5196d"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(5028),
                            GoodTypeId = new Guid("39234702-29d2-4abb-976e-a0bc8a8f4836"),
                            IsActual = true,
                            Name = "Туфли"
                        },
                        new
                        {
                            Id = new Guid("50d2dc32-0ef7-43f0-81ed-ead8c237dfb9"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(5029),
                            GoodTypeId = new Guid("39234702-29d2-4abb-976e-a0bc8a8f4836"),
                            IsActual = true,
                            Name = "Каблуки"
                        },
                        new
                        {
                            Id = new Guid("e29440b7-f4c4-4b36-b144-3f2c4d681b51"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(5029),
                            GoodTypeId = new Guid("5fbdc75d-be80-431e-979d-1e5e02b1ce5c"),
                            IsActual = true,
                            Name = "Рюкзаки"
                        },
                        new
                        {
                            Id = new Guid("b70270fe-52ac-47d7-8ea0-d6b2a8c0a036"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(5030),
                            GoodTypeId = new Guid("5fbdc75d-be80-431e-979d-1e5e02b1ce5c"),
                            IsActual = true,
                            Name = "Сумки"
                        },
                        new
                        {
                            Id = new Guid("c6b8fe5a-f555-4290-8d61-cb862829d062"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(5031),
                            GoodTypeId = new Guid("5fbdc75d-be80-431e-979d-1e5e02b1ce5c"),
                            IsActual = true,
                            Name = "Барсетки"
                        },
                        new
                        {
                            Id = new Guid("efb5e640-9c7d-4a2b-a442-3064962f3a73"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(5034),
                            GoodTypeId = new Guid("5fbdc75d-be80-431e-979d-1e5e02b1ce5c"),
                            IsActual = true,
                            Name = "Кольца"
                        },
                        new
                        {
                            Id = new Guid("ce9e4965-f0ae-4c69-9aaa-fe9642c85a32"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(5035),
                            GoodTypeId = new Guid("5fbdc75d-be80-431e-979d-1e5e02b1ce5c"),
                            IsActual = true,
                            Name = "Браслеты"
                        },
                        new
                        {
                            Id = new Guid("ddcea7c9-521a-4b4d-8dc9-dbafda0342fa"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(5036),
                            GoodTypeId = new Guid("5fbdc75d-be80-431e-979d-1e5e02b1ce5c"),
                            IsActual = true,
                            Name = "Перчатки"
                        });
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Models.Entities.GoodType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("GoodTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("be06f6e5-66a3-4bf3-8217-8a8433daaf57"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(4950),
                            IsActual = true,
                            Name = "Верхняя одежда"
                        },
                        new
                        {
                            Id = new Guid("8dcf657e-a3b2-497e-a6de-d2cc6687b2e8"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(4968),
                            IsActual = true,
                            Name = "Нижняя одежда"
                        },
                        new
                        {
                            Id = new Guid("39234702-29d2-4abb-976e-a0bc8a8f4836"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(4970),
                            IsActual = true,
                            Name = "Обувь"
                        },
                        new
                        {
                            Id = new Guid("5fbdc75d-be80-431e-979d-1e5e02b1ce5c"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(4971),
                            IsActual = true,
                            Name = "Аксессуары"
                        });
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Models.Entities.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("15052e27-e29c-4ef6-a99a-d379812b5d53"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(7389),
                            Description = "Адики .......",
                            IsActual = true,
                            Name = "Adidas"
                        },
                        new
                        {
                            Id = new Guid("e55eaea7-ef90-42fb-954e-ae74251cf961"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(7395),
                            Description = "Найки ..........",
                            IsActual = true,
                            Name = "Nke"
                        },
                        new
                        {
                            Id = new Guid("dea7b10c-8b02-4af8-b587-737f11914062"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(7396),
                            Description = "Гучи ..........",
                            IsActual = true,
                            Name = "Gucci"
                        },
                        new
                        {
                            Id = new Guid("431ef5bf-2da3-4426-af11-ccb776773e09"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 80, DateTimeKind.Local).AddTicks(7397),
                            Description = "Томми ..........",
                            IsActual = true,
                            Name = "Tommy Hilfiger"
                        });
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Models.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Models.Entities.OrderedGood", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DiscountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GoodId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("GoodId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SizeId");

                    b.ToTable("OrderedGoods");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Models.Entities.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GoodSubtypeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GoodSubtypeId");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8180835-6942-4e2b-99a4-7a602092685e"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 81, DateTimeKind.Local).AddTicks(241),
                            GoodSubtypeId = new Guid("010e9af5-1d47-453c-8bf4-ca2acedf9f9f"),
                            IsActual = true,
                            Name = "XXL"
                        },
                        new
                        {
                            Id = new Guid("ab74a4e2-728b-4dfe-bc7a-e6c119d895b0"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 81, DateTimeKind.Local).AddTicks(248),
                            GoodSubtypeId = new Guid("010e9af5-1d47-453c-8bf4-ca2acedf9f9f"),
                            IsActual = true,
                            Name = "XL"
                        },
                        new
                        {
                            Id = new Guid("6727e37f-8289-4c4c-a4ae-fd88f9607a8d"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 81, DateTimeKind.Local).AddTicks(249),
                            GoodSubtypeId = new Guid("010e9af5-1d47-453c-8bf4-ca2acedf9f9f"),
                            IsActual = true,
                            Name = "L"
                        },
                        new
                        {
                            Id = new Guid("5ec65441-21e5-4245-909d-6372eb2f6cad"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 81, DateTimeKind.Local).AddTicks(276),
                            GoodSubtypeId = new Guid("010e9af5-1d47-453c-8bf4-ca2acedf9f9f"),
                            IsActual = true,
                            Name = "M"
                        },
                        new
                        {
                            Id = new Guid("cd2b66d4-6921-4248-975b-9142149946a9"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 81, DateTimeKind.Local).AddTicks(278),
                            GoodSubtypeId = new Guid("010e9af5-1d47-453c-8bf4-ca2acedf9f9f"),
                            IsActual = true,
                            Name = "S"
                        },
                        new
                        {
                            Id = new Guid("e102460c-a053-40ac-b4c2-a45aa36051aa"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 81, DateTimeKind.Local).AddTicks(284),
                            GoodSubtypeId = new Guid("010e9af5-1d47-453c-8bf4-ca2acedf9f9f"),
                            IsActual = true,
                            Name = "XS"
                        },
                        new
                        {
                            Id = new Guid("e9b1d35a-d658-4995-86f3-422f47d0eea0"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 81, DateTimeKind.Local).AddTicks(285),
                            GoodSubtypeId = new Guid("11a22f6f-8043-46cf-9d37-d2bf58b0ec95"),
                            IsActual = true,
                            Name = "XXL"
                        },
                        new
                        {
                            Id = new Guid("2f59ee82-7737-4457-aec2-538fc071f10a"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 81, DateTimeKind.Local).AddTicks(286),
                            GoodSubtypeId = new Guid("11a22f6f-8043-46cf-9d37-d2bf58b0ec95"),
                            IsActual = true,
                            Name = "XL"
                        },
                        new
                        {
                            Id = new Guid("1a22db0b-4c71-41f7-ab8e-5a4c6ec73352"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 81, DateTimeKind.Local).AddTicks(287),
                            GoodSubtypeId = new Guid("11a22f6f-8043-46cf-9d37-d2bf58b0ec95"),
                            IsActual = true,
                            Name = "L"
                        },
                        new
                        {
                            Id = new Guid("4bdc91da-1aa0-4247-bf10-0e28cb1e3d5b"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 81, DateTimeKind.Local).AddTicks(289),
                            GoodSubtypeId = new Guid("11a22f6f-8043-46cf-9d37-d2bf58b0ec95"),
                            IsActual = true,
                            Name = "M"
                        },
                        new
                        {
                            Id = new Guid("e6a4bcfa-e81b-425e-bd08-ab347fac28c7"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 81, DateTimeKind.Local).AddTicks(290),
                            GoodSubtypeId = new Guid("11a22f6f-8043-46cf-9d37-d2bf58b0ec95"),
                            IsActual = true,
                            Name = "S"
                        },
                        new
                        {
                            Id = new Guid("1d083484-10f9-481a-9285-a04048b87024"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 81, DateTimeKind.Local).AddTicks(291),
                            GoodSubtypeId = new Guid("11a22f6f-8043-46cf-9d37-d2bf58b0ec95"),
                            IsActual = true,
                            Name = "XS"
                        },
                        new
                        {
                            Id = new Guid("756a9ffd-8c08-4585-ae11-4c605e903b17"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 81, DateTimeKind.Local).AddTicks(292),
                            GoodSubtypeId = new Guid("e29440b7-f4c4-4b36-b144-3f2c4d681b51"),
                            IsActual = true,
                            Name = "XXL"
                        },
                        new
                        {
                            Id = new Guid("09abec63-1553-406e-82eb-134aac905f48"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 81, DateTimeKind.Local).AddTicks(295),
                            GoodSubtypeId = new Guid("e29440b7-f4c4-4b36-b144-3f2c4d681b51"),
                            IsActual = true,
                            Name = "XL"
                        },
                        new
                        {
                            Id = new Guid("67bd71ef-e889-4402-b58e-c79b718732a9"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 81, DateTimeKind.Local).AddTicks(296),
                            GoodSubtypeId = new Guid("e29440b7-f4c4-4b36-b144-3f2c4d681b51"),
                            IsActual = true,
                            Name = "M"
                        },
                        new
                        {
                            Id = new Guid("843f6d8d-f0c5-4b6b-9e2c-e8a39e14142d"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 81, DateTimeKind.Local).AddTicks(297),
                            GoodSubtypeId = new Guid("e29440b7-f4c4-4b36-b144-3f2c4d681b51"),
                            IsActual = true,
                            Name = "S"
                        },
                        new
                        {
                            Id = new Guid("511aaf50-d268-4989-b341-61653a170088"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 81, DateTimeKind.Local).AddTicks(298),
                            GoodSubtypeId = new Guid("d023cf9a-7b27-4bc4-b481-6fdff24d1faa"),
                            IsActual = true,
                            Name = "XXL"
                        },
                        new
                        {
                            Id = new Guid("c8fdfbd8-dcaa-4bc2-b6ad-1953f71f331d"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 81, DateTimeKind.Local).AddTicks(300),
                            GoodSubtypeId = new Guid("d023cf9a-7b27-4bc4-b481-6fdff24d1faa"),
                            IsActual = true,
                            Name = "XL"
                        },
                        new
                        {
                            Id = new Guid("a7d01673-acf2-454d-8071-4cc5e6f7b269"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 81, DateTimeKind.Local).AddTicks(301),
                            GoodSubtypeId = new Guid("d023cf9a-7b27-4bc4-b481-6fdff24d1faa"),
                            IsActual = true,
                            Name = "L"
                        },
                        new
                        {
                            Id = new Guid("b8a79dc2-e0dd-4a2f-9bc8-0fb05bc0919d"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 81, DateTimeKind.Local).AddTicks(302),
                            GoodSubtypeId = new Guid("d023cf9a-7b27-4bc4-b481-6fdff24d1faa"),
                            IsActual = true,
                            Name = "M"
                        },
                        new
                        {
                            Id = new Guid("ed24337d-59ae-4e4d-a2ca-417325ac6e33"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 81, DateTimeKind.Local).AddTicks(303),
                            GoodSubtypeId = new Guid("d023cf9a-7b27-4bc4-b481-6fdff24d1faa"),
                            IsActual = true,
                            Name = "S"
                        },
                        new
                        {
                            Id = new Guid("2fbefbcb-6fad-4c92-b86e-b00d5b0f40b8"),
                            CreateDate = new DateTime(2024, 4, 28, 21, 32, 33, 81, DateTimeKind.Local).AddTicks(306),
                            GoodSubtypeId = new Guid("d023cf9a-7b27-4bc4-b481-6fdff24d1faa"),
                            IsActual = true,
                            Name = "XS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SneakerShop.DataAdapters.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SneakerShop.DataAdapters.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SneakerShop.DataAdapters.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SneakerShop.DataAdapters.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Models.Entities.BasketElement", b =>
                {
                    b.HasOne("SneakerShop.DataAdapters.Models.Entities.Discount", "_Discount")
                        .WithMany("BasketElements")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SneakerShop.DataAdapters.Models.Entities.Good", "_Good")
                        .WithMany("BasketElements")
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SneakerShop.DataAdapters.Models.Entities.Size", "_Size")
                        .WithMany("BasketElements")
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SneakerShop.DataAdapters.Models.Entities.AppUser", "_User")
                        .WithMany("Basket")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("_Discount");

                    b.Navigation("_Good");

                    b.Navigation("_Size");

                    b.Navigation("_User");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Models.Entities.Discount", b =>
                {
                    b.HasOne("SneakerShop.DataAdapters.Models.Entities.DiscountType", "_DiscountType")
                        .WithMany("Discounts")
                        .HasForeignKey("DiscountTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SneakerShop.DataAdapters.Models.Entities.Good", "_Good")
                        .WithMany("Discounts")
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("_DiscountType");

                    b.Navigation("_Good");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Models.Entities.Good", b =>
                {
                    b.HasOne("SneakerShop.DataAdapters.Models.Entities.GoodSubtype", "_GoodSubtype")
                        .WithMany("Goods")
                        .HasForeignKey("GoodSubtypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SneakerShop.DataAdapters.Models.Entities.Manufacturer", "_Manufacturer")
                        .WithMany("Goods")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("_GoodSubtype");

                    b.Navigation("_Manufacturer");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Models.Entities.GoodSubtype", b =>
                {
                    b.HasOne("SneakerShop.DataAdapters.Models.Entities.GoodType", "GoodType")
                        .WithMany("GoodSubtypes")
                        .HasForeignKey("GoodTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GoodType");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Models.Entities.Order", b =>
                {
                    b.HasOne("SneakerShop.DataAdapters.Models.Entities.AppUser", "_User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("_User");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Models.Entities.OrderedGood", b =>
                {
                    b.HasOne("SneakerShop.DataAdapters.Models.Entities.Discount", "_Discount")
                        .WithMany("OrderedGoods")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SneakerShop.DataAdapters.Models.Entities.Good", "_Good")
                        .WithMany("OrderedGoods")
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SneakerShop.DataAdapters.Models.Entities.Order", "_Order")
                        .WithMany("OrderedGoods")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SneakerShop.DataAdapters.Models.Entities.Size", "_Size")
                        .WithMany("OrderedGoods")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("_Discount");

                    b.Navigation("_Good");

                    b.Navigation("_Order");

                    b.Navigation("_Size");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Models.Entities.Size", b =>
                {
                    b.HasOne("SneakerShop.DataAdapters.Models.Entities.GoodSubtype", "_GoodSubtype")
                        .WithMany("Sizes")
                        .HasForeignKey("GoodSubtypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("_GoodSubtype");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Models.Entities.AppUser", b =>
                {
                    b.Navigation("Basket");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Models.Entities.Discount", b =>
                {
                    b.Navigation("BasketElements");

                    b.Navigation("OrderedGoods");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Models.Entities.DiscountType", b =>
                {
                    b.Navigation("Discounts");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Models.Entities.Good", b =>
                {
                    b.Navigation("BasketElements");

                    b.Navigation("Discounts");

                    b.Navigation("OrderedGoods");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Models.Entities.GoodSubtype", b =>
                {
                    b.Navigation("Goods");

                    b.Navigation("Sizes");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Models.Entities.GoodType", b =>
                {
                    b.Navigation("GoodSubtypes");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Models.Entities.Manufacturer", b =>
                {
                    b.Navigation("Goods");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Models.Entities.Order", b =>
                {
                    b.Navigation("OrderedGoods");
                });

            modelBuilder.Entity("SneakerShop.DataAdapters.Models.Entities.Size", b =>
                {
                    b.Navigation("BasketElements");

                    b.Navigation("OrderedGoods");
                });
#pragma warning restore 612, 618
        }
    }
}
